{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectUser","selectedUserId","query","todoStatus","handleChange","className","htmlFor","type","name","value","id","placeholder","onChange","map","todo","key","completed","checked","readOnly","title","userId","onClick","BASE_URL","getTodos","url","fetch","options","then","response","ok","Error","status","json","getUser","a","CurrentUser","state","user","this","loadData","prevProps","props","result","setState","data","clearUser","email","phone","React","Component","App","target","getFilteredTodos","filteredTodos","filter","toLowerCase","includes","length","randomBtn","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7861c53.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({ todos,\n  selectUser,\n  selectedUserId,\n  query,\n  todoStatus,\n  handleChange }) => (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n\n        <div className=\"TodoList__labels\">\n          <label\n            htmlFor=\"search-query\"\n            className=\"TodoList__labelForInput\"\n          >\n            Search todo title\n          </label>\n          <label\n            htmlFor=\"select-status\"\n            className=\"TodoList__labelForSelect\"\n          >\n            Sort by todo status:\n          </label>\n        </div>\n\n        <div className=\"TodoList__searchTodos\">\n          <input\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            id=\"search-query\"\n            placeholder=\"Type search word\"\n            onChange={handleChange}\n          />\n\n          <select\n            className=\"TodoList__select\"\n            name=\"todoStatus\"\n            value={todoStatus}\n            id=\"select-status\"\n            onChange={handleChange}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={\n              todo.completed\n                ? 'TodoList__item TodoList__item--checked'\n                : 'TodoList__item TodoList__item--unchecked'\n            }\n            >\n\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={\n                selectedUserId === todo.userId\n                  ? 'TodoList__user-button--selected button'\n                  : 'TodoList__user-button button'\n              }\n                type=\"button\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n              >\n                User\n                &nbsp;\n                #\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n);\n\nTodoList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  query: PropTypes.string.isRequired,\n  todoStatus: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => (fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}`);\n    }\n\n    return response.json();\n  })\n);\n\nexport const getTodos = () => request('/todos');\n\nexport const getUser = async(userId) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const result = await getUser(this.props.userId);\n\n    this.setState({ user: result.data });\n  }\n\n  render() {\n    const { userId, clearUser } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user: &nbsp;\n            {userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    todoStatus: '',\n  };\n\n  async componentDidMount() {\n    const result = await getTodos();\n\n    this.setState({ todos: result.data });\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  }\n\n  getFilteredTodos = () => {\n    const { todos, query, todoStatus } = this.state;\n    let filteredTodos = [...todos];\n\n    filteredTodos = todos.filter(todo => (todo\n      && todo.title && todo.title.toLowerCase()\n      .includes(query.toLowerCase())));\n\n    switch (todoStatus) {\n      case 'completed':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === true);\n        break;\n\n      case 'active':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === false);\n        break;\n\n      default:\n        filteredTodos = [...filteredTodos];\n        break;\n    }\n\n    return filteredTodos;\n  }\n\n  render() {\n    const { todos, selectedUserId, query, todoStatus } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0 && (\n            <TodoList\n              todos={this.getFilteredTodos()}\n              selectedUserId={selectedUserId}\n              query={query}\n              todoStatus={todoStatus}\n              selectUser={this.selectUser}\n              handleChange={this.handleChange}\n              randomBtn={this.randomBtn}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId !== 0 ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}